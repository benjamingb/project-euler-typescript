import { from, Observable } from 'rxjs';
import { takeWhile as tkeWhileRx, filter, reduce } from 'rxjs/operators';
import { takeWhile, fibonacci } from './utils';

/**
 * Problem 2
 * Even Fibonacci
 *
 * Each new term in the Fibonacci sequence
 * is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose
 * values do not exceed four million, find the sum of the even-valued terms.
 */

export class P002 {
  readonly problemName = 'evenFibonacci';

  solution1 = (limit: number): number => {
    let [prev, curr] = [1, 1];
    let sum = 0;
    while (curr < limit) {
      !(curr % 2) && (sum += curr); // is equal to //if (curr % 2 ==0) sum += curr
      [prev, curr] = [curr, curr + prev];
    }
    return sum;
  };

  //using fibonacci iteraror
  solution2 = (limit: number): number => {
    let sum = 0;
    for (let n of fibonacci()) {
      if (n >= limit) {
        break;
      }
      !(n % 2) && (sum += n); // is equal to //if (n % 2 ==0) sum += n
    }

    return sum;
  };

  //using generators
  solution3 = (limit: number): number => {
    const result = takeWhile((val: any) => val < limit, fibonacci());
    const sumEven = [...result]
      .filter(val => !(val % 2))
      .reduce((acc, val) => acc + val);

    return sumEven;
  };

  // using rsjx
  solution4 = (limit: number): Observable<number> => {
    const sumEven = from(fibonacci()).pipe(
      tkeWhileRx(val => val <= limit),
      filter(val => !(val % 2)),
      reduce((acc, val) => acc + val)
    );
    return sumEven;
  };

  solved = () => {
    const limit = 4_000_000;

    const solutions = [
      this.solution1(limit),
      this.solution2(limit),
      this.solution3(limit)
    ];

    solutions.map((result, i) => {
      console.log(`${this.problemName} solution ${i + 1}:`, result);
    });

    this.solution4(limit).subscribe((val: number) =>
      console.log(`${this.problemName} solution 4:`, val)
    );
  };
}
